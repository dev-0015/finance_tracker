type FinancialRecord = record {
  id : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  notes : opt text;
  category : text;
  amount : float64;
};
type FinancialRecordPayload = record {
  notes : opt text;
  category : text;
  amount : float64;
};
type _AzleResult = variant { Ok : FinancialRecord; Err : text };
type _AzleResult_1 = variant { Ok : text; Err : text };
type _AzleResult_2 = variant { Ok : float64; Err : text };
type _AzleResult_3 = variant { Ok : vec FinancialRecord; Err : text };
type _AzleResult_4 = variant {
  Ok : _InlineGetFinancialSummaryReturnTypeTypeArg0;
  Err : text;
};
type _InlineGetFinancialSummaryReturnTypeTypeArg0 = record {
  netFlow : float64;
  totalIncome : float64;
  totalExpense : float64;
};
service : () -> {
  addFinancialRecord : (FinancialRecordPayload) -> (_AzleResult);
  deleteFinancialRecord : (text) -> (_AzleResult);
  exportFinancialData : (text) -> (_AzleResult_1) query;
  getAverageMonthlyExpenses : () -> (_AzleResult_2) query;
  getAverageMonthlyIncome : () -> (_AzleResult_2) query;
  getExpensesGreaterThan : (float64) -> (_AzleResult_3) query;
  getFinancialRecord : (text) -> (_AzleResult) query;
  getFinancialRecords : () -> (_AzleResult_3) query;
  getFinancialRecordsByCategory : (text) -> (_AzleResult_3) query;
  getFinancialRecordsByDateRange : (nat64, nat64) -> (_AzleResult_3) query;
  getFinancialRecordsWithNotes : () -> (_AzleResult_3) query;
  getFinancialRecordsWithoutNotes : () -> (_AzleResult_3) query;
  getFinancialSummary : () -> (_AzleResult_4) query;
  getIncomesLessThan : (float64) -> (_AzleResult_3) query;
  updateExpenseCategory : (text, text) -> (_AzleResult_3);
  updateFinancialRecord : (text, FinancialRecordPayload) -> (_AzleResult);
}